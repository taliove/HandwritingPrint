#!/usr/bin/env node

const chalk = require('chalk');
const fs = require('fs-extra');
const path = require('path');
const CopybookSystem = require('./copybook-system');

async function demoRefreshFeature() {
    console.log(chalk.cyan.bold('üé¨ Âà∑Êñ∞Êï∞ÊçÆÂäüËÉΩÊºîÁ§∫\n'));
    console.log(chalk.gray('Ëøô‰∏™ÊºîÁ§∫Â∞ÜÂ±ïÁ§∫Â¶Ç‰Ωï‰ΩøÁî®Âà∑Êñ∞Êï∞ÊçÆÂäüËÉΩ\n'));

    const system = new CopybookSystem();
    const demoCopybookName = 'Âà∑Êñ∞ÊºîÁ§∫Â≠óÂ∏ñ';

    try {
        // 1. ÂàõÂª∫ÊºîÁ§∫Â≠óÂ∏ñ
        console.log(chalk.blue('üìù Ê≠•È™§1: ÂàõÂª∫ÊºîÁ§∫Â≠óÂ∏ñ'));
        
        const config = {
            title: 'Âà∑Êñ∞Êï∞ÊçÆÂäüËÉΩÊºîÁ§∫',
            description: 'ÊºîÁ§∫Â¶Ç‰Ωï‰ΩøÁî®Âà∑Êñ∞Êï∞ÊçÆÂäüËÉΩ',
            fonts: ['kaishu', 'xingshu'],
            colors: {
                theme: '#e8f5e8',
                border: '#4caf50'
            },
            content: {
                motto: 'Â≠¶ËÄåÊó∂‰π†‰πãÔºå‰∏ç‰∫¶ËØ¥‰πé'
            },
            output: {
                format: '$Â≠óÂ∏ñÂêç-$Â≠ó‰Ωì-$Â≠óÊï∞Â≠ó-$ÁîüÊàêÊó•Êúü'
            },
            layout: {
                columnCount: 12,
                wordCount: 8,
                margin: '1.2cm'
            },
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        const configPath = path.join(system.copybooksDir, `${demoCopybookName}.config.json`);
        const txtPath = path.join(system.copybooksDir, `${demoCopybookName}.txt`);
        const jsonPath = path.join(system.copybooksDir, `${demoCopybookName}.json`);

        await fs.writeJson(configPath, config, { spaces: 2 });
        await fs.writeFile(txtPath, 'Â≠¶ËÄåÊó∂‰π†‰πã ‰∏ç‰∫¶ËØ¥‰πé');
        
        console.log(chalk.green('   ‚úÖ ÊºîÁ§∫Â≠óÂ∏ñÂàõÂª∫ÊàêÂäü'));
        console.log(chalk.gray(`   üìÅ ÈÖçÁΩÆÊñá‰ª∂: ${demoCopybookName}.config.json`));
        console.log(chalk.gray(`   üìÑ ÊñáÊú¨Êñá‰ª∂: ${demoCopybookName}.txt`));

        // 2. ÂàùÊ¨°ÁîüÊàêÊï∞ÊçÆ
        console.log(chalk.blue('\nüìä Ê≠•È™§2: ÂàùÊ¨°ÁîüÊàêJSONÊï∞ÊçÆ'));
        let result = await system.generateJsonFromTxt(demoCopybookName);
        console.log(chalk.green(`   ‚úÖ ${result.message}`));

        let data = await fs.readJson(jsonPath);
        console.log(chalk.gray('   üìã ÂàùÂßãÊï∞ÊçÆ:'));
        data.forEach((item, index) => {
            console.log(chalk.gray(`      ${index + 1}. ${item.word} -> ${item.pinyin}`));
        });

        // 3. Ê®°ÊãüÁî®Êà∑ÁºñËæëtxtÊñá‰ª∂
        console.log(chalk.blue('\n‚úèÔ∏è  Ê≠•È™§3: Ê®°ÊãüÁî®Êà∑ÁºñËæëtxtÊñá‰ª∂'));
        console.log(chalk.gray('   ÂÅáËÆæÁî®Êà∑Áõ¥Êé•ÁºñËæë‰∫ÜtxtÊñá‰ª∂ÔºåÊ∑ªÂä†‰∫ÜÊõ¥Â§öÊ±âÂ≠ó...'));
        
        const newContent = `Â≠¶ËÄåÊó∂‰π†‰πã ‰∏ç‰∫¶ËØ¥‰πé
ÊúâÊúãËá™ËøúÊñπÊù• ‰∏ç‰∫¶‰πê‰πé
‰∫∫‰∏çÁü•ËÄå‰∏çÊÑ† ‰∏ç‰∫¶ÂêõÂ≠ê‰πé`;
        
        await fs.writeFile(txtPath, newContent);
        console.log(chalk.green('   ‚úÖ txtÊñá‰ª∂Â∑≤Êõ¥Êñ∞'));
        console.log(chalk.gray('   üìù Êñ∞ÂÜÖÂÆπ:'));
        console.log(chalk.gray(`      "${newContent.replace(/\n/g, ' | ')}"`));

        // 4. ÊºîÁ§∫Âà∑Êñ∞ËøáÁ®ã
        console.log(chalk.blue('\nüîÑ Ê≠•È™§4: Âà∑Êñ∞JSONÊï∞ÊçÆ'));
        console.log(chalk.gray('   ËøôÂ∞±ÊòØÁî®Êà∑Âú®ÁïåÈù¢‰∏≠ÈÄâÊã©"üîÑ Âà∑Êñ∞Êï∞ÊçÆ"Êó∂ÂèëÁîüÁöÑËøáÁ®ã...'));
        
        // ÊòæÁ§∫Âà∑Êñ∞ÂâçÁöÑÁä∂ÊÄÅ
        console.log(chalk.yellow('\n   üìä Âà∑Êñ∞ÂâçÁä∂ÊÄÅ:'));
        console.log(chalk.gray(`      Ê±âÂ≠óÊï∞Èáè: ${data.length} ‰∏™`));
        console.log(chalk.gray(`      ÊúÄÂêéÊõ¥Êñ∞: ${config.updatedAt}`));

        // ÊâßË°åÂà∑Êñ∞
        result = await system.generateJsonFromTxt(demoCopybookName);
        
        // ÊòæÁ§∫Âà∑Êñ∞ÂêéÁöÑÁä∂ÊÄÅ
        data = await fs.readJson(jsonPath);
        const updatedConfig = await fs.readJson(configPath);
        
        console.log(chalk.green('\n   ‚úÖ Êï∞ÊçÆÂà∑Êñ∞ÂÆåÊàê!'));
        console.log(chalk.yellow('   üìä Âà∑Êñ∞ÂêéÁä∂ÊÄÅ:'));
        console.log(chalk.gray(`      Ê±âÂ≠óÊï∞Èáè: ${data.length} ‰∏™`));
        console.log(chalk.gray(`      ÊúÄÂêéÊõ¥Êñ∞: ${updatedConfig.updatedAt}`));

        console.log(chalk.gray('\n   üìã Âà∑Êñ∞ÂêéÁöÑÂÆåÊï¥Êï∞ÊçÆ:'));
        data.forEach((item, index) => {
            console.log(chalk.gray(`      ${index + 1}. ${item.word} -> ${item.pinyin}`));
        });

        // 5. Â±ïÁ§∫ÂÆûÈôÖ‰ΩøÁî®Âú∫ÊôØ
        console.log(chalk.blue('\nüí° Ê≠•È™§5: ÂÆûÈôÖ‰ΩøÁî®Âú∫ÊôØ'));
        console.log(chalk.gray('   Âú®ÂÆûÈôÖ‰ΩøÁî®‰∏≠ÔºåÊÇ®ÂèØ‰ª•:'));
        console.log(chalk.gray('   1. Áî®‰ªª‰ΩïÊñáÊú¨ÁºñËæëÂô®ÊâìÂºÄ .txt Êñá‰ª∂'));
        console.log(chalk.gray('   2. Ê∑ªÂä†„ÄÅÂà†Èô§Êàñ‰øÆÊîπÊ±âÂ≠ó'));
        console.log(chalk.gray('   3. ‰øùÂ≠òÊñá‰ª∂'));
        console.log(chalk.gray('   4. Âú®Â≠óÂ∏ñÁÆ°ÁêÜÁïåÈù¢ÈÄâÊã©"üîÑ Âà∑Êñ∞Êï∞ÊçÆ"'));
        console.log(chalk.gray('   5. Á≥ªÁªü‰ºöËá™Âä®ÈáçÊñ∞ÁîüÊàêÊãºÈü≥Êï∞ÊçÆ'));

        // 6. ÁºñËØëÊºîÁ§∫
        console.log(chalk.blue('\nüî® Ê≠•È™§6: ÁºñËØëÊºîÁ§∫Â≠óÂ∏ñ'));
        console.log(chalk.gray('   Áé∞Âú®ÂèØ‰ª•ÁºñËØëËøô‰∏™Â≠óÂ∏ñ‰∫Ü...'));
        
        const results = await system.compileCopybook(demoCopybookName, ['kaishu']);
        if (results[0].success) {
            console.log(chalk.green(`   ‚úÖ ÁºñËØëÊàêÂäü: ${results[0].outputName}`));
        }

        console.log(chalk.cyan.bold('\nüéâ Âà∑Êñ∞Êï∞ÊçÆÂäüËÉΩÊºîÁ§∫ÂÆåÊàêÔºÅ'));
        console.log(chalk.green('\n‚ú® ‰∏ªË¶Å‰ºòÂäø:'));
        console.log(chalk.gray('   ‚Ä¢ ÊîØÊåÅÂ§ñÈÉ®ÁºñËæëÂô®ÁºñËæëÊ±âÂ≠ó'));
        console.log(chalk.gray('   ‚Ä¢ Ëá™Âä®ÊèêÂèñÊ±âÂ≠óÂπ∂ÂéªÈáç'));
        console.log(chalk.gray('   ‚Ä¢ AIÊô∫ËÉΩÁîüÊàêÊãºÈü≥'));
        console.log(chalk.gray('   ‚Ä¢ ÂÆâÂÖ®ÁöÑÁ°ÆËÆ§Êú∫Âà∂'));
        console.log(chalk.gray('   ‚Ä¢ ÂÆûÊó∂È¢ÑËßàÂíåÂØπÊØî'));

        // ËØ¢ÈóÆÊòØÂê¶‰øùÁïôÊºîÁ§∫Êï∞ÊçÆ
        const inquirer = require('inquirer');
        const { keepDemo } = await inquirer.prompt([
            {
                type: 'confirm',
                name: 'keepDemo',
                message: 'ÊòØÂê¶‰øùÁïôÊºîÁ§∫Â≠óÂ∏ñÔºü',
                default: false
            }
        ]);

        if (!keepDemo) {
            await fs.remove(configPath);
            await fs.remove(txtPath);
            await fs.remove(jsonPath);
            console.log(chalk.green('\nüßπ ÊºîÁ§∫Êï∞ÊçÆÂ∑≤Ê∏ÖÁêÜ'));
        } else {
            console.log(chalk.blue('\nüìö ÊºîÁ§∫Â≠óÂ∏ñÂ∑≤‰øùÁïôÔºåÊÇ®ÂèØ‰ª•Âú®‰∏ªÁïåÈù¢‰∏≠Êü•ÁúãÂíåÁÆ°ÁêÜ'));
        }

    } catch (error) {
        console.log(chalk.red(`‚ùå ÊºîÁ§∫Â§±Ë¥•: ${error.message}`));
        console.error(error);
    }
}

if (require.main === module) {
    demoRefreshFeature().catch(error => {
        console.error(chalk.red('‚ùå ÊºîÁ§∫ÂºÇÂ∏∏:'), error.message);
        process.exit(1);
    });
}

module.exports = demoRefreshFeature; 